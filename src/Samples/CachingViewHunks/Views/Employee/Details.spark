

<use namespace="CachingViewHunks.Models"/>

#// The name.Value is a viewdata trick. It will result in a property like:
#//   public Employee employee { get { ViewData.Eval('employee.Value'); } }
#// and
#//   public int EmployeeID { get { ViewData.Eval('employee.Key'); } }
        
<viewdata 
	employee.Value="Employee employee" 
	employee.Key="int EmployeeID"/>

#// You can also refer to the data with the ValueHolder class instead, with
#//   <viewdata employee="Spark.ValueHolder[[int, Employee]]"/>
#// and using 
#//   ${employee.Key} and ${employee.Value.FirstName}

<h2 cache="EmployeeID">${employee.FirstName} ${employee.LastName}</h2>

<p>Page viewed ${DateTime.Now}<p>
<cache key="EmployeeID">
<p>This part cached ${DateTime.Now}<p>
<p>Employee: ${employee.Title} ${employee.FirstName} ${employee.LastName}</p>

<p>Hire Date: ${employee.HireDate.GetValueOrDefault().ToString("D")}<p>
</cache>
